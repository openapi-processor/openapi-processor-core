plugins {
    id 'antlr'
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'org.jetbrains.dokka' version '1.6.10'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'com.github.ben-manes.versions' version '0.41.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group projectGroupId
version projectVersion

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

String getBuildProperty(String property) {
    project.findProperty (property) ?: System.getenv (property) ?: 'n/a'
}

String getBuildSignKey(String property) {
    project.findProperty (property) ?:
        System.getenv (property) ? System.getenv (property).replace("\\n", "\n"): 'n/a'
}

ext {
    processorApiVersion = '2021.1'
    processorTestVersion = '2022.2-SNAPSHOT'
    groovyVersion = '3.0.9'

    publishUser = getBuildProperty ('PUBLISH_USER')
    publishKey =  getBuildProperty ('PUBLISH_KEY')

    signKey = getBuildSignKey ('SIGN_KEY')
    signPwd = getBuildProperty ('SIGN_PWD')

    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

testSets {
    testInt
}

check.dependsOn testInt

sourceSets {
    main {
        java {
            srcDirs 'build/antlr', "${buildDir}/version"
        }
    }
}

generateGrammarSource {
    arguments += ['-package', 'io.openapiprocessor.core.processor.mapping.v2.parser']
    outputDirectory = new File("$buildDir/antlr/io/openapiprocessor/core/processor/mapping/v2/parser".toString())
}

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDir)
    classpath += files(compileTestKotlin.destinationDir)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileKotlin.dependsOn generateGrammarSource
compileKotlin.dependsOn "generateVersion"

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//id 'info.solidsoft.pitest' version '1.6.0'
//pitest {
//    verbose = true
//    testPlugin = "junit5"
//    junit5PluginVersion = "0.12"
//}

dependencies {
    antlr 'org.antlr:antlr4:4.9.3'

    compileOnly "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    implementation platform("org.jetbrains.kotlin:kotlin-bom:1.6.10")
    implementation platform("com.fasterxml.jackson:jackson-bom:2.13.1")

    implementation 'org.openapi4j:openapi-parser:1.0.7'
    implementation ('io.swagger.parser.v3:swagger-parser:2.0.28') {
        exclude group: 'io.swagger.parser.v3', module: 'swagger-parser-v2-converter'
        exclude group: 'io.swagger.core.v3', module: 'swagger-annotations'
    }

//    implementation ('io.openapiprocessor:openapi-parser:2021.0-SNAPSHOT.0')
    implementation (files("/Users/hauner/Development/openapi/openapi-parser/openapi-parser/build/libs/openapi-parser-2021.0-SNAPSHOT.0.jar"))
    implementation (files("/Users/hauner/Development/openapi/openapi-parser/openapi-parser-validator/build/libs/openapi-parser-validator-2021.0-SNAPSHOT.0.jar"))
    implementation (files("/Users/hauner/Development/openapi/openapi-parser/openapi-parser-support/build/libs/openapi-parser-support-2021.0-SNAPSHOT.0.jar"))
    implementation (files("/Users/hauner/Development/openapi/openapi-parser/openapi-parser-jackson/build/libs/openapi-parser-jackson-2021.0-SNAPSHOT.0.jar"))
    implementation (files("/Users/hauner/Development/openapi/openapi-parser/openapi-parser-interfaces/build/libs/openapi-parser-interfaces-2021.0-SNAPSHOT.0.jar"))

//    implementation(project(":openapi-parser-base"))
//    implementation(project(":openapi-parser-support"))
//    implementation(project(":openapi-parser-validator"))
//    implementation(project(":openapi-parser-interfaces"))
//    implementation ('io.openapiprocessor:openapi-parser:0.1')
//    implementation ('io.openapiprocessor:openapi-parser-base:0.1')
//    implementation ('io.openapiprocessor:openapi-parser-jackson:0.1')

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation ('org.apache.commons:commons-text:1.9')
    implementation ('com.atlassian.commonmark:commonmark:0.17.0')
    implementation ('com.google.googlejavaformat:google-java-format:1.13.0')
    implementation ('com.google.guava:guava:31.0.1-jre')
    implementation ('com.networknt:json-schema-validator:1.0.65')

    testImplementation "io.openapiprocessor:openapi-processor-api:$processorApiVersion"
    testImplementation ("io.openapiprocessor:openapi-processor-test:$processorTestVersion")

    testImplementation platform("org.codehaus.groovy:groovy-bom:3.0.9")
    testImplementation ("org.codehaus.groovy:groovy")
    testImplementation ("org.codehaus.groovy:groovy-nio")
    testImplementation ('org.spockframework:spock-core:2.0-groovy-3.0')
    testImplementation platform("org.junit:junit-bom:5.8.2")
    testImplementation ("org.junit.jupiter:junit-jupiter-api")
    testImplementation ("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("io.mockk:mockk:1.12.2")
    testImplementation("io.kotest:kotest-runner-junit5:5.1.0")
    testImplementation("io.kotest:kotest-framework-datatest:5.1.0")
    testImplementation ('ch.qos.logback:logback-classic:1.2.10')
    testImplementation("com.google.jimfs:jimfs:1.2")
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        String v = it.candidate.version
        println "candidate ${it.candidate}:$v"
        return v.endsWith ("-M1") || v.contains ("alpha")
    }
}

tasks.withType(Test) {
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set ('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: [dokkaHtml]) {
    archiveClassifier.set ('javadoc')
    from "$buildDir/docs"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dokkaHtml {
    outputDirectory = file("$buildDir/docs/kotlin".toString ())
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-core"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

nexusPublishing {
    repositories {
        sonatype() {
            username = publishUser
            password = publishKey
        }
    }
}


apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
